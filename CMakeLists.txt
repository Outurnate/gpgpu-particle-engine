# Joseph D. Copyright (C) 2015. GNU GPLv3.

CMAKE_MINIMUM_REQUIRED(VERSION 2.6.2 FATAL_ERROR)

#
# Project Properties
#
PROJECT(gpgpumd)
SET(APPLICATION_NAME "gpgpumd")
SET(APPLICATION_CODENAME "${PROJECT_NAME}")
SET(APPLICATION_COPYRIGHT_YEARS "2016")
SET(APPLICATION_VERSION_MAJOR 1)
SET(APPLICATION_VERSION_MINOR 0)
SET(APPLICATION_VERSION_PATCH 0)
SET(APPLICATION_VERSION_TYPE SNAPSHOT)
SET(APPLICATION_VERSION_STRING "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}-${APPLICATION_VERSION_TYPE}")
SET(APPLICATION_VENDOR_ID "com.outurnate")
SET(APPLICATION_VENDOR_NAME "outurnate")
SET(APPLICATION_VENDOR_URL "outurnate.com")
SET(APPLICATION_ID "${APPLICATION_VENDOR_ID}.${PROJECT_NAME}")

#
# Debugging Options
#
SET(CMAKE_VERBOSE_MAKEFILE 0) # Use 1 for debugging, 0 for release

#
# Project Output Paths
#
SET(MAINFOLDER ${PROJECT_SOURCE_DIR})
SET(EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")
INCLUDE_DIRECTORIES(${MAINFOLDER}/include)

#
# Locate Project Prerequisites 
#
FIND_PACKAGE(Boost 1.40 COMPONENTS system filesystem program_options unit_test_framework REQUIRED)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})

FIND_PACKAGE(PkgConfig)
PKG_CHECK_MODULES(LOG4CXX REQUIRED liblog4cxx)
INCLUDE_DIRECTORIES(${LOG4CXX_INCLUDE_DIRS})

FIND_PACKAGE(OpenCL)
INCLUDE_DIRECTORIES(${OpenCL_INCLUDE_DIRS})

#
# Configure Files
#
FILE(GLOB_RECURSE CONFIGINPUTS1 include/*.in.hpp.cmake)
FILE(GLOB_RECURSE CONFIGINPUTS2 include/*.hpp.in.cmake)
FILE(GLOB_RECURSE CONFIGINPUTS3 src/*.in.hpp.cmake)
FILE(GLOB_RECURSE CONFIGINPUTS4 src/*.hpp.in.cmake)
FILE(GLOB_RECURSE CONFIGINPUTS5 test/*.in.hpp.cmake)
FILE(GLOB_RECURSE CONFIGINPUTS6 test/*.hpp.in.cmake)
LIST(APPEND CONFIGINPUTS "${CONFIGINPUTS1}")
LIST(APPEND CONFIGINPUTS "${CONFIGINPUTS2}")
LIST(APPEND CONFIGINPUTS "${CONFIGINPUTS3}")
LIST(APPEND CONFIGINPUTS "${CONFIGINPUTS4}")
LIST(APPEND CONFIGINPUTS "${CONFIGINPUTS5}")
LIST(APPEND CONFIGINPUTS "${CONFIGINPUTS6}")
FOREACH(CONFIGINPUT ${CONFIGINPUTS})
    STRING (REPLACE ".in.hpp.cmake" ".hpp" CONFIGOUTPUT1 "${CONFIGINPUT}")
    STRING (REPLACE ".hpp.in.cmake" ".hpp" CONFIGOUTPUT2 "${CONFIGOUTPUT1}")
    CONFIGURE_FILE ("${CONFIGINPUT}" "${CONFIGOUTPUT2}")
ENDFOREACH(CONFIGINPUT ${CONFIGINPUTS})

#
# Add Build Targets
#
ADD_SUBDIRECTORY(src)

#
# Add Test Targets
#
FILE(GLOB project_tests ${MAINFOLDER}/test/*.cpp)

ENABLE_TESTING()

FOREACH(testFile ${project_tests})
  INCLUDE_DIRECTORIES(${MAINFOLDER}/include)
  GET_FILENAME_COMPONENT(testExecutable ${testFile} NAME_WE)
  ADD_EXECUTABLE(${testExecutable} ${testFile})
  TARGET_LINK_LIBRARIES(${testExecutable} ${Boost_LIBRARIES} project_CORE)
  ADD_TEST(NAME ${testExecutable} COMMAND ${MAINFOLDER}/bin/${testExecutable})
ENDFOREACH(testFile)

#
# Doxygen
#
find_package(Doxygen)
if(DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  add_custom_target(doc
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
    WORKING_DIRECTORY ${MAINFOLDER}
    COMMENT "Generating API documentation with Doxygen" VERBATIM
  )
endif(DOXYGEN_FOUND)

